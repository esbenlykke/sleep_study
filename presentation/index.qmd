---
title: "Machine Learned Models for Estimation of Sleep Quality in Free-Living Accelerometer Data"
subtitle: "(working title)"
author: "Esben Lykke, PhD student"
date: "`r format(Sys.Date(), '%d %B, %Y')`"
format:
  revealjs: 
    smaller: true
    theme: moon
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/SDU_WHITE_RGB-png.png
    footer: https://github.com/esbenlykke/sleep_study
    css: my_styles.css
editor_options: 
  chunk_output_type: console
smooth-scroll: true
bibliography: references.bib
---

## Background {.scrollable transition="convex"}

```{r}
#| echo: false
library(gt)
library(arrow)
library(visNetwork)
library(tidymodels)
```

Lists can optionally be displayed incrementally:

::: incremental
-   First item
-   Second item
-   Third item
:::

. . .

Insert pauses to make other types of content display incrementally.

::: footer
Learn more: [Incremental Lists](https://quarto.org/docs/presentations/revealjs/#incremental-lists)
:::

## Methods {transition="convex"}

Overview
Network plot of data preparation steps

. . . 

network plot

## Features {transition="fade" .smaller}

:::: {.columns}

::: {.column width="30%"}
::: {.fragment}
**Basic Features**

-   Weekday 
-   Time of Day
-   Placement
-   Temperature
:::
:::

::: {.column width="30%"}
::: {.fragment}
**ACC derived features**^[@skotte_detection_2014]

-   Mean ACC X 
-   Mean ACC Y
-   Mean ACC Z
-   Standard Deviation X
-   Standard Deviation Y
-   Standard Deviation Z
-   Max Standard Deviation
-   Inclination
:::
:::

::: {.column width="40%"}
::: {.fragment}
**Sensor-Independent Features**^[@walch_sleep_2019, @forger_simpler_1999]

-   Clock Proxy Linear
-   Clock Proxy Cosinus
:::
:::

::::

:::aside
:::
---

## Human Circadian Clock {.smaller transition="convex"}

@forger_simpler_1999: a so-called cubic van der Pol equation

::: {.fragment}
$$\frac{dx_c}{dt}=\frac{\pi}{12}\begin{cases}\mu(x_c-\frac{4x^3}{3})-x\begin{bmatrix}(\frac{24}{0.99669\tau_x})^2+kB\end{bmatrix}\end{cases}$$
:::

::: {.fragment .fade-in-then-semi-out}
This thing is dependent on ambient light and body temperature!
:::

::: {.fragment .fade-in-then-semi-out}
@walch_sleep_2019 incorporated this feature using step counts from the Apple Watch
:::

::: {.fragment}
But as demonstrated by @walch_sleep_2019, a simple cosine function does the tricks just as well :)
:::

## Circadian Proxy Features {.smaller transition="convex"}

```{r}
source(here::here("presentation/code/plot_sensor-independent.R"))

plot_proxy
```

## {.smaller transition="convex" .column}

```{r}
source("~/sleep_study/presentation/code/tables_performance.R")

tab_1
```

Performance of the models to predict each class <span style="color:gold">**seperately**</span>, i.e., "sleep" and "in-bed". 

## {.smaller transition="convex" .column}

```{r}
tab_2
```

Performance of the models to predict each <span style="color:gold">**combined**</span> class, i.e., "sleep" + "in-bed". 

---

## Bland-Altman Plots {.smaller transition="convex" .slide}

::: {.panel-tabset}

### Decision Tree

```{r}
#| echo: false
source(here::here("presentation/code/ba_plots.R"))
plots$decision_tree[[1]]

plots$decision_tree[[2]]

plots$decision_tree[[3]]

plots$decision_tree[[4]]

plots$decision_tree[[5]]
```

### Logistic Regression

```{r}
plots$logistic_regression[[1]]

plots$logistic_regression[[2]]

plots$logistic_regression[[3]]

plots$logistic_regression[[4]]

plots$logistic_regression[[5]]
```

### XGBoost

```{r}
plots$xgboost[[1]]

plots$xgboost[[2]]

plots$xgboost[[3]]

plots$xgboost[[4]]

plots$xgboost[[5]]
```


### Neural Net

```{r}
plots$neural_net[[1]]

plots$neural_net[[2]]

plots$neural_net[[3]]

plots$neural_net[[4]]

plots$neural_net[[5]]
```

:::

---

## In-bed classification flow {.smaller transition="zoom" .column}

```{r}
in_bed_tree <-
  read_rds("~/sleep_study/data/models/fitted_models/in_bed_simple_CART_fit.rds")

in_bed_tree |>
  extract_fit_engine() |>
  visTree(
    height = "550px",
    nodesPopSize = TRUE,
    minNodeSize = 10,
    maxNodeSize = 30,
    fallenLeaves = TRUE,
    legend = FALSE,
    digits = 3,
    direction = "UD",
    colorVar = c(
      "#CC5500", "#8B0000", "#FFD700",
      "#228B22", "#654321", "#8B0000", "#FFDB58"
    ),
    export = FALSE
  ) |>
  visNodes(font = list(
    color = "#EEE8D5",
    size = 20,
    strokeWidth = 1
  )) |>
  visEdges(font = list(
    color = "#EEE8D5",
    size = 20,
    strokeWidth = 1
  )) |> 
  visInteraction(dragNodes = FALSE, 
                 dragView = FALSE, 
                 zoomView = FALSE)
```

---

## Sleep classification flow {.smaller transition="zoom" .column}

```{r}
sleep_tree <-
  read_rds("~/sleep_study/data/models/fitted_models/sleep_simple_CART_fit.rds")

sleep_tree |>
  extract_fit_engine() |>
  visTree(
    height = "550px",
    nodesPopSize = TRUE,
    minNodeSize = 10,
    maxNodeSize = 30,
    fallenLeaves = TRUE,
    legend = FALSE,
    digits = 3,
    direction = "UD",
    colorVar = c(
      "#CC5500", "#8B0000", "#FFD700",
      "#228B22", "#654321", "#8B0000", "#FFDB58"
    ),
    export = FALSE
  ) |>
  visNodes(font = list(
    color = "#EEE8D5",
    strokeWidth = 1
  )) |>
  visEdges(font = list(
    color = "#EEE8D5",
    strokeWidth = 1
  )) |> 
  visInteraction(dragNodes = FALSE, 
                 dragView = FALSE, 
                 zoomView = FALSE)
```

